#!/bin/bash

# These commands take this form
# ./ops [script] [filename] [option]

script=${1}
filename=${2:-dev}
option=${3}

docker_cloud_username=""
docker_cloud_reponame=""
docker_compose_path="./docker"
docker_cloud_swarm_name=""

if [ -z $script ] ; then
  echo "please enter a command after ./ops"

elif [ $script == "provision" ] ; then
  ./scripts/provision

elif [ $script == "setup" ] ; then
  ./scripts/setup

elif [ $script == "start" ] ; then
  echo "starting $filename"
  docker-compose -f $docker_compose_path/$filename.yml up

elif [ $script == "stop" ] ; then
  echo "stopping $filename"
  docker-compose -f $docker_compose_path/$filename.yml down

elif [ $script == "build" ] ; then
  echo "building $filename"
  docker-compose -f $docker_compose_path/$filename.yml build

elif [ $script == "test" ] ; then
  echo "testing $filename"
  if [ "$filename" == "sut" ] ; then
    docker-compose -f api/docker-compose.test.yml build
    docker-compose -f api/docker-compose.test.yml run sut
    # docker-compose -f api/docker-compose.test.yml run --volumes "./:/opt/app/api" sut
  else
    docker exec -it docker_api_1 bash -c "cd /opt/app/api && yarn test"
  fi

elif [ $script == "ship" ] ; then
  echo "shipping $filename"
  if [ "$filename" == "dev" ] ; then
    echo "Woops! don't try and ship $filename"
    exit
  elif [ "$filename" == "stage" ] ; then
    docker pull quangoinc/quangosite
  elif [ "$filename" == "prod" ] ; then
    docker pull quangoinc/quangosite
  elif [ $filename == "manager" ] ; then
    docker network create --driver overlay proxy
  fi

  docker stack deploy \
    --compose-file="$docker_compose_path/$filename.yml" \
    --with-registry-auth $docker_cloud_swarm_name

fi